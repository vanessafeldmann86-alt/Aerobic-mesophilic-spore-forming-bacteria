# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Agdymz0_LXwiObDt-TOdjM_DrOQRHOh
"""

import matplotlib.pyplot as plt

# Dados fornecidos
types = ['CS', 'SCS', 'SWS']
total_by_type = [136, 142, 139]
positive_by_type = [83, 62, 52]

# Configuração do gráfico
bar_width = 0.35
x = range(len(types))

fig, ax = plt.subplots(figsize=(8, 6))

# Barras
bars1 = ax.bar([i - bar_width/2 for i in x], total_by_type, width=bar_width,
               label='Total Isolates', color='lightgray')
bars2 = ax.bar([i + bar_width/2 for i in x], positive_by_type, width=bar_width,
               label='Amylase Positive', color='steelblue')

# Rótulos e título
ax.set_xlabel('Sample Type')
ax.set_ylabel('Number of Isolates')
ax.set_title('Amylolytic Activity in Bacterial Isolates by Sample Type')
ax.set_xticks(x)
ax.set_xticklabels(types)
ax.legend()
ax.grid(axis='y', linestyle='--', alpha=0.7)

# Adiciona valores nas barras
for bar in bars1 + bars2:
    height = bar.get_height()
    ax.annotate(f'{int(height)}',
                xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 3),
                textcoords="offset points",
                ha='center', va='bottom')

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Dados
types = ['CS', 'SCS', 'SWS']
total_by_type = [136, 142, 139]
positive_by_type = [83, 62, 52]
negative_by_type = [total - pos for total, pos in zip(total_by_type, positive_by_type)]

# Cores e estilo
fig, ax = plt.subplots(figsize=(8, 6))

# Barras empilhadas
ax.bar(types, positive_by_type, label='Amylase Positive', color='steelblue')
ax.bar(types, negative_by_type, bottom=positive_by_type, label='Amylolytic Negative', color='lightgray')

# Rótulos e título
ax.set_xlabel('Sample Type')
ax.set_ylabel('Number of Isolates')
ax.set_title('Amylolytic Activity in Bacterial Isolates (Stacked Bar)')
ax.legend()
ax.grid(axis='y', linestyle='--', alpha=0.6)

# Adiciona valores nas barras
for i in range(len(types)):
    ax.text(i, positive_by_type[i] / 2, str(positive_by_type[i]), ha='center', va='center', color='white', fontsize=10)
    ax.text(i, positive_by_type[i] + negative_by_type[i] / 2, str(negative_by_type[i]), ha='center', va='center', color='black', fontsize=10)

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Dados
samples = ['CS', 'SCS', 'SWS']
positive = np.array([83, 62, 52])
negative = np.array([53, 80, 87])
totals = positive + negative

# Gráfico de barras empilhadas
fig, ax = plt.subplots()
bar1 = ax.bar(samples, positive, label='Amylase Positive', color='#3b82f6')
bar2 = ax.bar(samples, negative, bottom=positive, label='Amylolytic Negative', color='#d1d5db')

# Adiciona valores e porcentagens nas barras
for i in range(len(samples)):
    # Valor numérico
    ax.text(i, positive[i]/2, f'{positive[i]}\n({positive[i]/totals[i]*100:.1f}%)', ha='center', va='center', color='white', fontsize=9)
    ax.text(i, positive[i] + negative[i]/2, f'{negative[i]}\n({negative[i]/totals[i]*100:.1f}%)', ha='center', va='center', color='black', fontsize=9)

# Títulos e legendas
ax.set_title('Amylolytic Activity', fontsize=12)
ax.set_ylabel('Number of Isolates')
ax.set_xlabel('Sample')
ax.legend()
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Dados
samples = ['CS', 'SCS', 'SWS']
positive = np.array([83, 62, 52])
negative = np.array([53, 80, 87])
totals = positive + negative

# Número de "++" entre os positivos
double_positive = [7, 1, 5]

# Gráfico
fig, ax = plt.subplots()
bar1 = ax.bar(samples, positive, label='Amylase Positive', color='#3b82f6')
bar2 = ax.bar(samples, negative, bottom=positive, label='Amylolytic Negative', color='#d1d5db')

# Adiciona textos com porcentagem e ++
for i in range(len(samples)):
    pos_pct = positive[i]/totals[i]*100
    ax.text(i, positive[i]/2, f'{positive[i]}\n({pos_pct:.1f}%)\n++: {double_positive[i]}',
            ha='center', va='center', color='white', fontsize=9)
import matplotlib.pyplot as plt

# Dados
types = ['CS', 'SCS', 'SWS']
total_by_type = [136, 142, 139]
positive_by_type = [83, 62, 52]
negative_by_type = [total - pos for total, pos in zip(total_by_type, positive_by_type)]

# Cores e estilo
fig, ax = plt.subplots(figsize=(8, 6))

# Barras empilhadas
ax.bar(types, positive_by_type, label='Amylase Positive', color='steelblue')
ax.bar(types, negative_by_type, bottom=positive_by_type, label='Amylolytic Negative', color='lightgray')

# Rótulos e título
ax.set_xlabel('Sample Type')
ax.set_ylabel('Number of Isolates')
ax.set_title('Amylolytic Activity in Bacterial Isolates (Stacked Bar)')
ax.legend()
ax.grid(axis='y', linestyle='--', alpha=0.6)

# Adiciona valores nas barras
for i in range(len(types)):
    ax.text(i, positive_by_type[i] / 2, str(positive_by_type[i]), ha='center', va='center', color='white', fontsize=10)
    ax.text(i, positive_by_type[i] + negative_by_type[i] / 2, str(negative_by_type[i]), ha='center', va='center', color='black', fontsize=10)

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Dados
samples = ['CS', 'SCS', 'SWS']
positive = np.array([83, 62, 52])
negative = np.array([53, 80, 87])
totals = positive + negative

# Gráfico de barras empilhadas
fig, ax = plt.subplots()
bar1 = ax.bar(samples, positive, label='Amylase Positive', color='#3b82f6')
bar2 = ax.bar(samples, negative, bottom=positive, label='Amylolytic Negative', color='#d1d5db')

# Adiciona valores e porcentagens nas barras
for i in range(len(samples)):
    # Valor numérico
    ax.text(i, positive[i]/2, f'{positive[i]}\n({positive[i]/totals[i]*100:.1f}%)', ha='center', va='center', color='black', fontsize=12)
    ax.text(i, positive[i] + negative[i]/2, f'{negative[i]}\n({negative[i]/totals[i]*100:.1f}%)', ha='center', va='center', color='black', fontsize=12)

# Títulos e legendas
ax.set_title('Amylolytic Activity', fontsize=12)
ax.set_ylabel('Number of Isolates')
ax.set_xlabel('Sample')
ax.legend()
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Dados
samples = ['CS', 'SCS', 'SWS']
positive = np.array([83, 62, 52])
negative = np.array([53, 80, 87])
totals = positive + negative

# Número de "++" entre os positivos
double_positive = [7, 1, 5]

# Gráfico
fig, ax = plt.subplots()
bar1 = ax.bar(samples, positive, label='Amylase Positive', color='#3b82f6')
bar2 = ax.bar(samples, negative, bottom=positive, label='Amylase Negative', color='#d1d5db')

# Adiciona textos com porcentagem e ++
for i in range(len(samples)):
    pos_pct = positive[i]/totals[i]*100
    ax.text(i, positive[i]/2, f'{positive[i]}\n({pos_pct:.1f}%)\n++: {double_positive[i]}',
            ha='center', va='center', color='black', fontsize=12)

    neg_pct = negative[i]/totals[i]*100
    ax.text(i, positive[i] + negative[i]/2, f'{negative[i]}\n({neg_pct:.1f}%)',
            ha='center', va='center', color='black', fontsize=12)


# Títulos e legendas
ax.set_title('Amylolytic Activity', fontsize=14)
ax.set_ylabel('Number of Isolates')
ax.set_xlabel('Sample')
ax.legend()
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Substitua pelos seus dados completos
scs_ams = [3.25, 3.65, 2.89, 1.95, 4.21, 3.13, 1.19, 1.78, 2.69, 2.81, 0.0, 2.25, 2.2, 1.91, 1.6, 2.16, 3.41, 0.0, 2.26, 2.92, 0.0, 3.3, 4.42, 3.15, 2.05, 2.51, 1.0, 2.5, 1.93, 1.76]
scs_amsr = [2.46, 1.58, 1.86, 1.34, 4.1, 2.13, 0.0, 1.51, 1.82, 2.81, 0.0, 2.57, 1.58, 1.38, 0.0, 1.69, 3.37, 0.0, 2.15, 2.55, 0.0, 2.87, 3.76, 2.0, 1.65, 1.75, 0.0, 1.75, 1.91, 1.48]
cs_ams = [2.38, 3.47, 3.81, 3.71, 4.41, 2.15, 4.22, 2.02, 3.34, 3.1, 2.96, 3.1, 3.25, 3.42, 2.95, 2.95, 3.04, 3.49, 2.95, 3.35, 2.82, 4.45, 2.14, 1.87, 4.31, 2.17, 3.71, 3.52, 3.04, 2.95]
cs_amsr = [2.23, 2.56, 2.37, 3.58, 3.96, 1.6, 3.96, 2.06, 3.28, 2.6, 2.7, 3.18, 3.38, 2.85, 1.88, 2.08, 2.49, 2.9, 2.5, 3.12, 2.54, 4.01, 1.68, 1.69, 3.88, 1.78, 3.50, 3.41, 3.06, 2.97]
sws_ams = [2.69, 4.99, 3.79, 3.14, 4.09, 1.65, 3.26, 1.82, 3.26, 4.14, 4.25, 2.75, 1.48, 2.21, 4.48, 3.31, 4.55, 3.52, 2.96, 4.36, 2.99, 2.69, 4.98, 1.98, 3.60, 1.99, 3.88, 3.74, 2.65, 3.10]
sws_amsr = [2.0, 4.2, 2.81, 3.11, 0.6, 3.37, 3.21, 1.11, 2.89, 3.84, 4.11, 1.2, 1.46, 0.48, 3.91, 2.4, 4.05, 3.25, 2.7, 3.14, 2.63, 2.72, 4.1, 1.63, 3.57, 1.71, 3.42, 2.39, 1.94, 3.29]

# Função para montar dados
dados = []
def adicionar(lista, amostra, tipo):
    for v in lista:
        dados.append({'Amostra': amostra, 'Tipo': tipo, 'Log_Esporos': v})

# Consolidando os dados
adicionar(s

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Substitua pelos seus dados completos
scs_ams = [3.25, 3.65, 2.89, 1.95, 4.21, 3.13, 1.19, 1.78, 2.69, 2.81, 0, 2.25, 2.2, 1.91, 1.6, 2.16, 3.41, 0, 2.26, 2.92, 0, 3.3, 4.42, 3.15, 2.05, 2.51, 1, 2.5, 1.93, 1.76]
scs_amsr = [2.46, 1.58, 1.86, 1.34, 4.1, 2.13, 0, 1.51, 1.82, 2.81, 0, 2.57, 1.58, 1.38, 0, 1.69, 3.37, 0, 2.15, 2.55, 0, 2.87, 3.76, 2, 1.65, 1.75, 0, 1.75, 1.91, 1.48]
cs_ams = [3.25, 3.65, 2.89, 1.95, 4.21, 3.13, 1.19, 1.78, 2.69, 2.81, 0, 2.25, 2.2, 1.91, 1.6, 2.16, 3.41, 0, 2.26, 2.92, 0, 3.3, 4.42, 3.15, 2.05, 2.51, 1, 2.5, 1.93, 1.76]
cs_amsr = [2.23, 2.56, 2.37, 3.58, 3.96, 1.6, 3.96, 2.06, 3.28, 2.6, 2.7, 3.18, 3.38, 2.85, 1.88, 2.08, 2.49, 2.9, 2.5, 3.12, 2.54, 4.01, 1.68, 1.69, 3.88, 1.78, 3.50, 3.41, 3.06, 2.97]
sws_ams = [2.69, 4.99, 3.79, 3.14, 4.09, 1.65, 3.26, 1.82, 3.26, 4.14, 4.25, 2.75, 1.48, 2.21, 4.48, 3.31, 4.55, 3.52, 2.96, 4.36, 2.99, 2.69, 4.98, 1.98, 3.60, 1.99, 3.88, 3.74, 2.65, 3.10]
sws_amsr = [2.0, 4.2, 2.81, 3.11, 0.6, 3.37, 3.21, 1.11, 2.89, 3.84, 4.11, 1.2, 1.46, 0.48, 3.91, 2.4, 4.05, 3.25, 2.7, 3.14, 2.63, 2.72, 4.1, 1.63, 3.57, 1.71, 3.42, 2.39, 1.94, 3.29]

# Função para montar dados
dados = []
def adicionar(lista, amostra, tipo):
    for v in lista:
        dados.append({'Amostra': amostra, 'Tipo': tipo, 'Log_spores': v})

# Consolidando os dados
adicionar(scs_ams, "SCS", "AMS")
adicionar(scs_amsr, "SCS", "AMSR")
adicionar(cs_ams, "CS", "AMS")
adicionar(cs_amsr, "CS", "AMSR")
adicionar(sws_ams, "SWS", "AMS")
adicionar(sws_amsr, "SWS", "AMSR")

df = pd.DataFrame(dados)

# Criando gráfico
plt.figure(figsize=(12, 6))
sns.violinplot(data=df, x="Amostra", y="Log_spores", hue="Tipo",
               split=True, inner=None, palette="Set2", cut=0)
sns.boxplot(data=df, x="Amostra", y="Log_spores", hue="Tipo",
            dodge=True, showcaps=True, boxprops={'facecolor':'none'},
            showfliers=True, whiskerprops={'linewidth':2})

# Ajustar legenda
handles, labels = plt.gca().get_legend_handles_labels()
plt.legend(handles[0:2], labels[0:2], title="Tipo", loc="upper right")

plt.title("Distribution of Aerobic Mesophilic Spore-forming in Cassava-Based Products:")
plt.ylabel("Log spores/g")
plt.xlabel("Sample")
plt.grid(True, axis='y', linestyle='--', alpha=0.7)
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Substitua pelos seus dados completos
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Substitua pelos seus dados completos
scs_ams = [3.25, 3.65, 2.89, 1.95, 4.21, 3.13, 1.19, 1.78, 2.69, 2.81, 0, 2.25, 2.2, 1.91, 1.6, 2.16, 3.41, 0, 2.26, 2.92, 0, 3.3, 4.42, 3.15, 2.05, 2.51, 1, 2.5, 1.93, 1.76]
scs_amsr = [2.46, 1.58, 1.86, 1.34, 4.1, 2.13, 0, 1.51, 1.82, 2.81, 0, 2.57, 1.58, 1.38, 0, 1.69, 3.37, 0, 2.15, 2.55, 0, 2.87, 3.76, 2, 1.65, 1.75, 0, 1.75, 1.91, 1.48]
cs_ams = [2.38, 3.47, 3.81, 3.71, 4.41, 2.15, 4.22, 2.02, 3.34, 3.1, 2.96, 3.1, 3.25, 3.42, 2.95, 2.95, 3.04, 3.49, 2.95, 3.35, 2.82, 4.45, 2.14, 1.87, 4.31, 2.17, 3.71, 3.52, 3.04, 2.95]
cs_amsr = [2.23, 2.56, 2.37, 3.58, 3.96, 1.6, 3.96, 2.06, 3.28, 2.6, 2.7, 3.18, 3.38, 2.85, 1.88, 2.08, 2.49, 2.9, 2.5, 3.12, 2.54, 4.01, 1.68, 1.69, 3.88, 1.78, 3.50, 3.41, 3.06, 2.97]
sws_ams = [2.69, 4.99, 3.79, 3.14, 4.09, 1.65, 3.26, 1.82, 3.26, 4.14, 4.25, 2.75, 1.48, 2.21, 4.48, 3.31, 4.55, 3.52, 2.96, 4.36, 2.99, 2.69, 4.98, 1.98, 3.60, 1.99, 3.88, 3.74, 2.65, 3.10]
sws_amsr = [2.0, 4.2, 2.81, 3.11, 0.6, 3.37, 3.21, 1.11, 2.89, 3.84, 4.11, 1.2, 1.46, 0.48, 3.91, 2.4, 4.05, 3.25, 2.7, 3.14, 2.63, 2.72, 4.1, 1.63, 3.57, 1.71, 3.42, 2.39, 1.94, 3.29]

# Função para montar dados
dados = []
def adicionar(lista, amostra, tipo):
    for v in lista:
        dados.append({'Amostra': amostra, 'Tipo': tipo, 'Log_spores': v})

# Consolidando os dados
adicionar(scs_ams, "SCS", "AMS")
adicionar(scs_amsr, "SCS", "AMSR")
adicionar(cs_ams, "CS", "AMS")
adicionar(cs_amsr, "CS", "AMSR")
adicionar(sws_ams, "SWS", "AMS")
adicionar(sws_amsr, "SWS", "AMSR")

df = pd.DataFrame(dados)

# Criando gráfico
plt.figure(figsize=(12, 6))
sns.violinplot(data=df, x="Amostra", y="Log_spores", hue="Tipo",
               split=True, inner=None, palette="Set2", cut=0)
sns.boxplot(data=df, x="Amostra", y="Log_spores", hue="Tipo",
            dodge=True, showcaps=True, boxprops={'facecolor':'none'},
            showfliers=True, whiskerprops={'linewidth':2})

# Ajustar legenda
handles, labels = plt.gca().get_legend_handles_labels()
plt.legend(handles[0:2], labels[0:2], title="Tipo", loc="upper right")

plt.title("Distribution of Aerobic Mesophilic Spore-forming in Cassava-Based Products:")
plt.ylabel("Log spores/g")
plt.xlabel("Sample")
plt.grid(True, axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
sws_amsr = [2.0, 4.2, 2.81, 3.11, 0.6, 3.37, 3.21, 1.11, 2.89, 3.84, 4.11, 1.2, 1.46, 0.48, 3.91, 2.4, 4.05, 3.25, 2.7, 3.14, 2.63, 2.72, 4.1, 1.63, 3.57, 1.71, 3.42, 2.39, 1.94, 3.29]

# Função para montar dados
dados = []
def adicionar(lista, amostra, tipo):
    for v in lista:
        dados.append({'Amostra': amostra, 'Tipo': tipo, 'Log_spores': v})

# Consolidando os dados
adicionar(scs_ams, "SCS", "AMS")
adicionar(scs_amsr, "SCS", "AMSR")
adicionar(cs_ams, "CS", "AMS")
adicionar(cs_amsr, "CS", "AMSR")
adicionar(sws_ams, "SWS", "AMS")
adicionar(sws_amsr, "SWS", "AMSR")

df = pd.DataFrame(dados)

# Criando gráfico
plt.figure(figsize=(12, 6))
sns.violinplot(data=df, x="Amostra", y="Log_spores", hue="Tipo",
               split=True, inner=None, palette="Set2", cut=0)
sns.boxplot(data=df, x="Amostra", y="Log_spores", hue="Tipo",
            dodge=True, showcaps=True, boxprops={'facecolor':'none'},
            showfliers=True, whiskerprops={'linewidth':2})

# Ajustar legenda
handles, labels = plt.gca().get_legend_handles_labels()
plt.legend(handles[0:2], labels[0:2], title="", loc="upper right")

plt.title("Distribution of Aerobic Mesophilic Spore-forming in Cassava-Based Products:")
plt.ylabel("Log spores/g")
plt.xlabel("Sample")
plt.grid(True, axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Função para montar dados
dados = []
def adicionar(lista, amostra, tipo):
    for v in lista:
        dados.append({'Amostra': amostra, 'Tipo': tipo, 'Log_Spores': v})

# Consolidando os dados
adicionar(scs_ams, "SCS", "AMS")
adicionar(scs_amsr, "SCS", "AMSR")
adicionar(cs_ams, "CS", "AMS")
adicionar(cs_amsr, "CS", "AMSR")
adicionar(sws_ams, "SWS", "AMS")
adicionar(sws_amsr, "SWS", "AMSR")

df = pd.DataFrame(dados)

# Criando gráfico
plt.figure(figsize=(12, 6))
sns.violinplot(data=df, x="Amostra", y="Log_spores", hue="Tipo",
               split=True, inner=None, palette="Set2", cut=0)
sns.boxplot(data=df, x="Amostra", y="Log_spores", hue="Tipo",
            dodge=True, showcaps=True, boxprops={'facecolor':'none'},
            showfliers=True, whiskerprops={'linewidth':2})

# Ajustar legenda
handles, labels = plt.gca().get_legend_handles_labels()
plt.legend(handles[0:2], labels[0:2], title="Tipo", loc="upper right")

plt.title("Distribution of Aerobic Mesophilic Spore-forming in Cassava-Based Products:")
plt.ylabel("Log spores/g")
plt.xlabel("Sample")
plt.grid(True, axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
import matplotlib.pyplot as plt

x = [1, 2, 3, 4]
y = [10, 20, 25, 30]

plt.figure(figsize=(8, 6))  # Tamanho da figura
plt.plot(x, y)

plt.title('Título do Gráfico', fontsize=16)
plt.xlabel('Eixo X', fontsize=14)
plt.ylabel('Eixo Y', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)


plt.figure(figsize=(12, 6))

# Gráfico de violino
sns.violinplot(data=df, x="Amostra", y="Log_spores", hue="Tipo",
               split=True, inner=None, palette="Set2", cut=0)

# Boxplot sobreposto
sns.boxplot(data=df, x="Amostra", y="Log_spores", hue="Tipo",
            dodge=True, showcaps=True, boxprops={'facecolor': 'none'},
            showfliers=True, whiskerprops={'linewidth': 2})

# Ajustar legenda
handles, labels = plt.gca().get_legend_handles_labels()
plt.legend(handles[0:2], labels[0:2], title="Tipo", loc="upper right", fontsize=12, title_fontsize=13)

# Títulos e eixos com tamanho de fonte maior
plt.title("Distribution of Aerobic Mesophilic Spore-forming in Cassava-Based Products", fontsize=16)
plt.ylabel("Log Spores/g", fontsize=14)
plt.xlabel("Sample", fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

# Grade e layout
plt.grid(True, axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))

sns.violinplot(data=df, x="Amostra", y="Log_Spores", hue="Tipo",
               split=True, inner=None, palette="Set2", cut=0)
sns.boxplot(data=df, x="Amostra", y="Log_Spores", hue="Tipo",
            dodge=True, showcaps=True, boxprops={'facecolor':'none'},
            showfliers=True, whiskerprops={'linewidth':2})

# Legenda
handles, labels = plt.gca().get_legend_handles_labels()
plt.legend(handles[0:2], labels[0:2], title="", loc="upper right", fontsize=12, title_fontsize=13)

# Títulos com fontes maiores
plt.title("Distribution of Aerobic Mesophilic Spore-forming in Cassava-Based Products", fontsize=16)
plt.ylabel("Log spores/g", fontsize=14)
plt.xlabel("Sample", fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

plt.grid(True, axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()