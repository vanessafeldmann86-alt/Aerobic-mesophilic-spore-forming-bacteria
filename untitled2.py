# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JF-kwYAPf3NYE6gGvN6aNlvh-OHCOsZu
"""

import pandas as pd

# Criando o DataFrame com os dados
df = pd.DataFrame({
    'materia_prima': ['polvilho doce'] * 30 + ['polvilho azedo'] * 30 + ['fecula de mandioca'] * 30,
    'esporos_totais': [
        # Polvilho doce
        2.69, 4.99, 3.79, 3.14, 4.09, 1.65, 3.26, 1.82, 3.26, 4.14, 4.25, 2.75, 1.48, 2.21, 4.48, 3.31, 4.55, 3.52, 2.96, 4.36, 2.99, 2.69, 4.98, 1.98, 3.60, 1.99, 3.88, 3.74, 2.65, 3.10,
        # Polvilho azedo
       3.25, 3.65, 2.89, 1.95, 4.21, 3.13, 1.19, 1.78, 2.69, 2.81, 0, 2.25, 2.2, 1.91, 1.6, 2.16, 3.41, 0, 2.26, 2.92, 0, 3.3, 4.42, 3.15, 2.05, 2.51, 1, 2.5, 1.93, 1.76,
        # Fécula de mandioca
        2.38, 3.47, 3.81, 3.71, 4.41, 2.15, 4.22, 2.02, 3.34, 3.1, 2.96, 3.1, 3.25, 3.42, 2.95, 2.95, 3.04, 3.49, 2.95, 3.35, 2.82, 4.45, 2.14, 1.87, 4.31, 2.17, 3.71, 3.52, 3.04, 2.95
    ],
    'esporos_rope': [
        # Polvilho doce
       2.0, 4.2,2.81, 3.11, 0.6, 3.37, 3.21, 1.11, 2.89, 3.84, 4.11, 1.2, 1.46, 0.48, 3.91, 2.4, 4.05, 3.25, 2.7, 3.14, 2.63, 2.72, 4.1, 1.63, 3.57, 1.71, 3.42, 2.39, 1.94, 3.29,
        # Polvilho azedo
        2.46, 1.58, 1.86, 1.34, 4.1, 2.13, 0, 1.51, 1.82, 2.81, 0, 2.57, 1.58, 1.38, 0, 1.69, 3.37, 0, 2.15, 2.55, 0, 2.87, 3.76, 2, 1.65, 1.75, 0, 1.75, 1.91, 1.48,
        # Fécula de mandioca
       2.23, 2.56, 2.37, 3.58, 3.96, 1.6, 3.96, 2.06, 3.28, 2.6, 2.7, 3.18, 3.38, 2.85, 1.88, 2.08, 2.49, 2.9, 2.5, 3.12, 2.54, 4.01, 1.68, 1.69, 3.88, 1.78, 3.50, 3.41, 3.06, 2.97
    ]
})

# Visualizando as primeiras linhas do DataFrame
df.head()
from scipy.stats import shapiro

# Função para realizar o teste de Shapiro-Wilk
def teste_normalidade(dados, nome_grupo):
    stat, p = shapiro(dados)
    print(f"Teste de Shapiro-Wilk para {nome_grupo}: Estatística={stat:.3f}, p-valor={p:.3f}")
    if p > 0.05:
        print("Distribuição normal")
    else:
        print("Distribuição não normal")

# Aplicando o teste para cada grupo
for grupo in df['materia_prima'].unique():
    print(f"\n{grupo} - Esporos Totais:")
    teste_normalidade(df[df['materia_prima'] == grupo]['esporos_totais'], grupo)
    print(f"\n{grupo} - Esporos Rope:")
    teste_normalidade(df[df['materia_prima'] == grupo]['esporos_rope'], grupo)

    from scipy.stats import kruskal

# Função para realizar o teste de Kruskal-Wallis
def teste_kruskal(dados, nome_variavel):
    grupos = [dados[dados['materia_prima'] == grupo][nome_variavel] for grupo in dados['materia_prima'].unique()]
    stat, p = kruskal(*grupos)
    print(f"\nTeste de Kruskal-Wallis para {nome_variavel}: Estatística={stat:.3f}, p-valor={p:.3f}")
    if p < 0.05:
        print("Há diferenças significativas entre os grupos.")
    else:
        print("Não há diferenças significativas entre os grupos.")

# Aplicando o teste para cada variável
teste_kruskal(df, 'esporos_totais')
teste_kruskal(df, 'esporos_rope')
import pandas as pd

# Seu DataFrame com os dados (copie aqui seus dados conforme já fez)

# Calculando mediana e intervalo interquartil (IQR) por grupo para ambas variáveis
summary_stats = df.groupby('materia_prima').agg(
    mediana_esporos_totais=('esporos_totais', 'median'),
    Q1_esporos_totais=('esporos_totais', lambda x: x.quantile(0.25)),
    Q3_esporos_totais=('esporos_totais', lambda x: x.quantile(0.75)),
    mediana_esporos_rope=('esporos_rope', 'median'),
    Q1_esporos_rope=('esporos_rope', lambda x: x.quantile(0.25)),
    Q3_esporos_rope=('esporos_rope', lambda x: x.quantile(0.75))
)

# Arredondando para duas casas decimais
print(summary_stats.round(2))

import matplotlib.pyplot as plt
import seaborn as sns

# Criando o gráfico
plt.figure(figsize=(12, 6))

# Gráfico de violino para "Esporos Totais"
plt.subplot(1, 2, 1)
sns.violinplot(data=df, x='materia_prima', y='esporos_totais', inner="box", color="lightblue", bw=0.3)
plt.title('Count of AMS')
plt.ylabel('(LOG Esporos/g)')

# Gráfico de violino para "Esporos Rope"
plt.subplot(1, 2, 2)
sns.violinplot(data=df, x='materia_prima', y='esporos_rope', inner="box", color="lightgreen", bw=0.3)
plt.title('Count of AMSR')
plt.ylabel(' (LOG esporos/g)')

# Ajustando o layout
plt.tight_layout()

# Exibindo o gráfico
plt.show()