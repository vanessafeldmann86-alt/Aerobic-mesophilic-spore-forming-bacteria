# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TRYov3oG-B2PO_yHQ1OfWmAFhiDv-FY4
"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

dados = {
    'Amostra': ['PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD'],
    'Contagem de Esporos': [2.69, 4.99, 3.79, 3.14, 4.09, 1.65, 3.26, 1.82, 3.26, 4.14, 4.25, 2.75, 1.48, 2.21, 4.48, 3.31, 4.55, 3.52, 2.96, 4.36, 2.99, 2.69, 4.98, 1.98, 3.60, 1.99, 3.88, 3.74, 2.65, 3.10]
}


df = pd.DataFrame(dados)

sns.violinplot(x='Amostra', y='Contagem de Esporos', data=df)


plt.title('Distribuição da Contagem de Esporos EMA')
plt.xlabel('POLVILHO DOCE')
plt.ylabel('Contagem de Esporos (log esporos/g)')



plt.show()
# Adicionando os pontos no gráfico de violino
sns.stripplot(x='Amostra', y='Contagem de Esporos', data=df, color='black', alpha=0.6, jitter=True)

# Adicionando uma caixa para destacar os outliers
sns.boxplot(x='Amostra', y='Contagem de Esporos', data=df, whis=[5, 95], fliersize=5, width=0.2, color='orange', linewidth=1.5)

# Adicionando título e rótulos
plt.title('Distribuição da Contagem de Esporos por Amostra com Outliers')
plt.xlabel('Amostra')
plt.ylabel('Contagem de Esporos (UFC/g)')

# Exibindo o gráfico
plt.show()
# Importando bibliotecas
import seaborn as sns
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

dados = {
    'Amostra': ['PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD'],
    'Contagem de Esporos': [2.69, 4.99, 3.79, 3.14, 4.09, 1.65, 3.26, 1.82, 3.26, 4.14, 4.25, 2.75, 1.48, 2.21, 4.48, 3.31, 4.55, 3.52, 2.96, 4.36, 2.99, 2.69, 4.98, 1.98, 3.60, 1.99, 3.88, 3.74, 2.65, 3.10]
}


df = pd.DataFrame(dados)

sns.violinplot(x='Amostra', y='Contagem de Esporos', data=df)


plt.title('Distribuição da Contagem de Esporos EMA')
plt.xlabel('POLVILHO DOCE')
plt.ylabel('Contagem de Esporos (log esporos/g)')



plt.show()
# Adicionando os pontos no gráfico de violino
sns.stripplot(x='Amostra', y='Contagem de Esporos', data=df, color='black', alpha=0.6, jitter=True)

# Adicionando uma caixa para destacar os outliers
sns.boxplot(x='Amostra', y='Contagem de Esporos', data=df, whis=[5, 95], fliersize=5, width=0.2, color='orange', linewidth=1.5)

# Adicionando título e rótulos
plt.title('Distribuição da Contagem de Esporos por Amostra com Outliers')
plt.xlabel('Amostra')
plt.ylabel('Contagem de Esporos (UFC/g)')

# Exibindo o gráfico
plt.show()
# Importando bibliotecas
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Exemplo de dados (substitua com seus próprios dados)
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

dados = {
    'Amostra': ['PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD', 'PD'],
    'Contagem de Esporos': [2.69, 4.99, 3.79, 3.14, 4.09, 1.65, 3.26, 1.82, 3.26, 4.14, 4.25, 2.75, 1.48, 2.21, 4.48, 3.31, 4.55, 3.52, 2.96, 4.36, 2.99, 2.69, 4.98, 1.98, 3.60, 1.99, 3.88, 3.74, 2.65, 3.10]
}


df = pd.DataFrame(dados)

sns.violinplot(x='Amostra', y='Contagem de Esporos', data=df)


plt.title('Distribuição da Contagem de Esporos EMA')
plt.xlabel('POLVILHO DOCE')
plt.ylabel('Contagem de Esporos (log esporos/g)')



plt.show()
# Adicionando os pontos no gráfico de violino
sns.stripplot(x='Amostra', y='Contagem de Esporos', data=df, color='black', alpha=0.6, jitter=True)

# Adicionando uma caixa para destacar os outliers
sns.boxplot(x='Amostra', y='Contagem de Esporos', data=df, whis=[5, 95], fliersize=5, width=0.2, color='orange', linewidth=1.5)

# Adicionando título e rótulos
plt.title('Distribuição da Contagem de Esporos por Amostra com Outliers')
plt.xlabel('Amostra')
plt.ylabel('Contagem de Esporos (UFC/g)')

# Exibindo o gráfico
plt.show()

# Importando bibliotecas (removido a duplicação)
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

dados = {
    'Amostra': ['FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM', 'FM'],
    'Contagem de Esporos': [2.23, 2.56, 2.37, 3.58, 3.96, 1.6, 3.96, 2.06, 3.28, 2.6, 2.7, 3.18, 3.38, 2.85, 1.88, 2.08, 2.49, 2.9, 2.5, 3.12, 2.54, 4.01, 1.68, 1.69, 3.88, 1.78, 3.50, 3.41, 3.06, 2.97]
}

# Criando um DataFrame com os dados
df = pd.DataFrame(dados)

# Criando o gráfico de violino
plt.figure(figsize=(8, 6))
sns.violinplot(x='Amostra', y='Contagem de Esporos', data=df, inner=None, color='lightgray')

# Sobrepondo o gráfico de boxplot para destacar a mediana, quartis e outliers
sns.boxplot(x='Amostra', y='Contagem de Esporos', data=df, whis=[5, 95], fliersize=5, width=0.2, color='orange', linewidth=1.5)
# Adicionando título e rótulos
plt.title('Distribuição da Contagem de Esporos EMAR')
plt.xlabel('Amostra')
plt.ylabel('Contagem de Esporos (UFC/g)')

# Exibindo o gráfico
plt.show()

import pandas as pd
from scipy.stats import shapiro, kruskal

# Coloque seus valores aqui:
valores_PD = [3.72, 4.81, 4.12, 3.76, 5.48, 3.93, 3.99, 5.48, 4.01, 5.04, 5.22, 3.71, 5.04, 5.35, 4.10, 3.92, 3.41, 4.84, 4.73, 5.00, 5.95, 5.28, 4.42, 4.0, 5.33, 6.68, 5.67, 3.71, 4.04, 5.09]
valores_PA = [3.72, 3.57, 5.21, 4.97, 5.11, 5.10, 3.49, 4.97, 4.98, 5.2, 3.73, 4.39, 4.49, 5.45, 3.66, 4.69, 5.21, 3.84, 5.03, 4.02, 3.42, 5.86, 3.47, 3.29, 5.02, 5.24, 3.51, 3.92, 4.22, 5.12]
valores_FM = [5.20, 5.47, 4.78, 5.47, 4.70, 4.74, 4.12, 4.87, 6.52, 5.46, 4.95, 4.81, 6.01, 5.43, 4.25, 4.84, 5.87, 4.67, 4.81, 5.44, 6.14, 5.87, 5.02, 4.93, 6.66, 5.60, 4.36, 6.12, 6.34, 6.39]

# Montando o DataFrame
dados = {
    'Amostra': ['PD']*30 + ['PA']*30 + ['FM']*30,
    'Contagem de Esporos': valores_PD + valores_PA + valores_FM
}
df = pd.DataFrame(dados)

# Teste de normalidade (Shapiro-Wilk) por grupo
for grupo in df['Amostra'].unique():
    stat, p = shapiro(df[df['Amostra'] == grupo]['Contagem de Esporos'])
    print(f"Shapiro-Wilk ({grupo}): estatística={stat:.4f}, p-valor={p:.4f}")

# Teste de Kruskal-Wallis
grupos = [df[df['Amostra'] == nome]['Contagem de Esporos'] for nome in ['PD', 'PA', 'FM']]
stat, p = kruskal(*grupos)
print(f"\nKruskal-Wallis: estatística={stat:.4f}, p-valor={p:.4f}")
if p < 0.05:
    print("→ Diferença significativa entre pelo menos dois grupos.")

    # Teste post-hoc de Dunn
    dunn_result = sp.posthoc_dunn(df, val_col='Contagem de Esporos', group_col='Amostra', p_adjust='bonferroni')
    print("\nResultado do Teste de Dunn (com correção de Bonferroni):")
    print(dunn_result)
else:
    print("→ Não há diferença significativa entre os grupos.")

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import shapiro, kruskal
import scikit_posthocs as sp

# Seus dados
valores_PD = [3.72, 4.81, 4.12, 3.76, 5.48, 3.93, 3.99, 5.48, 4.01, 5.04, 5.22, 3.71, 5.04, 5.35, 4.10, 3.92, 3.41, 4.84, 4.73, 5.00, 5.95, 5.28, 4.42, 4.0, 5.33, 6.68, 5.67, 3.71, 4.04, 5.09]
valores_PA = [3.72, 3.57, 5.21, 4.97, 5.11, 5.10, 3.49, 4.97, 4.98, 5.2, 3.73, 4.39, 4.49, 5.45, 3.66, 4.69, 5.21, 3.84, 5.03, 4.02, 3.42, 5.86, 3.47, 3.29, 5.02, 5.24, 3.51, 3.92, 4.22, 5.12]
valores_FM = [5.20, 5.47, 4.78, 5.47, 4.70, 4.74, 4.12, 4.87, 6.52, 5.46, 4.95, 4.81, 6.01, 5.43, 4.25, 4.84, 5.87, 4.67, 4.81, 5.44, 6.14, 5.87, 5.02, 4.93, 6.66, 5.60, 4.36, 6.12, 6.34, 6.39]

# Criando DataFrame
df = pd.DataFrame({
    'Amostra': ['PD']*30 + ['PA']*30 + ['FM']*30,
    'pH': valores_PD + valores_PA + valores_FM
})

# Normalidade (Shapiro-Wilk)
print("Teste de Normalidade (Shapiro-Wilk):")
for grupo in df['Amostra'].unique():
    stat, p = shapiro(df[df['Amostra'] == grupo]['pH'])
    print(f"{grupo}: estatística={stat:.4f}, p-valor={p:.4f}")

# Kruskal-Wallis
grupos = [df[df['Amostra'] == g]['pH'] for g in ['PD', 'PA', 'FM']]
stat, p = kruskal(*grupos)
print(f"\nKruskal-Wallis: estatística={stat:.4f}, p-valor={p:.4f}")
if p < 0.05:
    print("→ Diferença significativa entre os grupos.")
    dunn = sp.posthoc_dunn(df, val_col='pH', group_col='Amostra', p_adjust='bonferroni')
    print("\nTeste de Dunn (post-hoc):")
    print(dunn)
else:
    print("→ Não há diferença significativa.")

# Resumo estatístico
summary = df.groupby('Amostra').agg(
    Mediana=('pH', 'median'),
    Q1=('pH', lambda x: x.quantile(0.25)),
    Q3=('pH', lambda x: x.quantile(0.75))
).round(2)

print("\nResumo Estatístico (pH):")
print(summary)

import pandas as pd

# Dados de pH
valores_PD = [3.72, 4.81, 4.12, 3.76, 5.48, 3.93, 3.99, 5.48, 4.01, 5.04, 5.22, 3.71, 5.04, 5.35, 4.10, 3.92, 3.41, 4.84, 4.73, 5.00, 5.95, 5.28, 4.42, 4.0, 5.33, 6.68, 5.67, 3.71, 4.04, 5.09]
valores_PA = [3.72, 3.57, 5.21, 4.97, 5.11, 5.10, 3.49, 4.97, 4.98, 5.2, 3.73, 4.39, 4.49, 5.45, 3.66, 4.69, 5.21, 3.84, 5.03, 4.02, 3.42, 5.86, 3.47, 3.29, 5.02, 5.24, 3.51, 3.92, 4.22, 5.12]
valores_FM = [5.20, 5.47, 4.78, 5.47, 4.70, 4.74, 4.12, 4.87, 6.52, 5.46, 4.95, 4.81, 6.01, 5.43, 4.25, 4.84, 5.87, 4.67, 4.81, 5.44, 6.14, 5.87, 5.02, 4.93, 6.66, 5.60, 4.36, 6.12, 6.34, 6.39]

# Criando DataFrame
df = pd.DataFrame({
    'Amostra': ['PD']*30 + ['PA']*30 + ['FM']*30,
    'pH': valores_PD + valores_PA + valores_FM
})

# Calculando mediana e quartis
summary = df.groupby('Amostra')['pH'].agg([
    ('Mediana', 'median'),
    ('Q1', lambda x: x.quantile(0.25)),
    ('Q3', lambda x: x.quantile(0.75))
]).round(2)

print("Resumo estatístico (pH):")
print(summary)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Dados de pH para cada tipo de amostra
valores_SWCS = [3.72, 4.81, 4.12, 3.76, 5.48, 3.93, 3.99, 5.48, 4.01, 5.04, 5.22, 3.71, 5.04, 5.35, 4.10, 3.92, 3.41, 4.84, 4.73, 5.00, 5.95, 5.28, 4.42, 4.0, 5.33, 6.68, 5.67, 3.71, 4.04, 5.09]
valores_SCS = [3.72, 3.57, 5.21, 4.97, 5.11, 5.10, 3.49, 4.97, 4.98, 5.2, 3.73, 4.39, 4.49, 5.45, 3.66, 4.69, 5.21, 3.84, 5.03, 4.02, 3.42, 5.86, 3.47, 3.29, 5.02, 5.24, 3.51, 3.92, 4.22, 5.12]
valores_CS = [5.20, 5.47, 4.78, 5.47, 4.70, 4.74, 4.12, 4.87, 6.52, 5.46, 4.95, 4.81, 6.01, 5.43, 4.25, 4.84, 5.87, 4.67, 4.81, 5.44, 6.14, 5.87, 5.02, 4.93, 6.66, 5.60, 4.36, 6.12, 6.34, 6.39]

# Criando o DataFrame
dados = {
    'Amostra': ['SWCS']*30 + ['SCS']*30 + ['CS']*30,
    'pH': valores_SWCS + valores_SCS + valores_CS
}
df = pd.DataFrame(dados)

# Criando o boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x='Amostra', y='pH', data=df, showfliers=True, palette='Set2')

# Adicionando título e rótulos
plt.title('pH Distribution', fontsize=14)
plt.xlabel('Sample', fontsize=12)
plt.ylabel('pH', fontsize=12)

# Exibindo o gráfico
plt.tight_layout()
plt.show()

"""# Nova seção"""

from google.colab import drive
drive.mount('/content/drive')